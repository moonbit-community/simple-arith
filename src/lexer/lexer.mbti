package simple-arith/lexer

alias @simple-arith/parser as @parser
alias @simple-arith/syntax as @syntax

// Values
fn tokenize(String) -> Array[(@parser.Token, @syntax.Pos, @syntax.Pos)]!LexError

// Types and methods
pub(all) struct LexEngine {
  graph : Array[(Int) -> (Int, Array[Array[Int]])]
  end_nodes : Array[(Int, Array[((Int, Int), (Int, Int))])?]
  start_tags : Array[Int]
  code_blocks_n : Int
}
impl LexEngine {
  run(Self, Lexbuf) -> (Int, Array[(Int, Int)])
}

pub type! LexError {
  UnrecognizedChar(@syntax.Pos, Char)
}
impl Show for LexError

type Lexbuf
impl Lexbuf {
  from_string(String) -> Self
}

type LineTrackingContext

// Type aliases

// Traits

