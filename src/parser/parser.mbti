// Generated using `moon info`, DON'T EDIT IT
package "simple-arith/parser"

import(
  "simple-arith/syntax"
)

// Values
fn expr(Array[(Token, @syntax.Pos, @syntax.Pos)], initial_pos? : @syntax.Pos) -> @syntax.Term raise ParseError

// Errors
pub suberror ParseError {
  UnexpectedToken(Token, (@syntax.Pos, @syntax.Pos), Array[TokenKind])
  UnexpectedEndOfInput(@syntax.Pos, Array[TokenKind])
}

// Types and methods
pub(all) enum Token {
  TRUE
  FALSE
  IF
  THEN
  ELSE
  ZERO
  SUCC
  PRED
  ISZERO
  LPAREN
  RPAREN
}
fn Token::kind(Self) -> TokenKind
impl Show for Token

pub(all) enum TokenKind {
  TK_TRUE
  TK_FALSE
  TK_IF
  TK_THEN
  TK_ELSE
  TK_ZERO
  TK_SUCC
  TK_PRED
  TK_ISZERO
  TK_LPAREN
  TK_RPAREN
}
impl Show for TokenKind

// Type aliases

// Traits

